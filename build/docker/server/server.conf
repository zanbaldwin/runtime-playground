map $http_x_forwarded_proto $fastcgi_https {
    default '';
    https on;
}

upstream phpfpm {
    server php:9000;
}

error_log /proc/self/fd/2 debug;

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name localhost 127.0.0.1;
    server_tokens off;
    include challenges.conf;
    location / {
        return 301 https://localhost$request_uri;
    }
}

server {
    listen 443 default_server ssl http2;
    listen [::]:443 default_server ssl http2;
    server_name localhost 127.0.0.1;
    server_tokens off;
    include ssl.conf;
    include challenges.conf;
    charset utf-8;

    client_max_body_size 16m;
    client_body_buffer_size 128k;

    # If you want a different webroot, then use a symlink.
    root /srv/public;
    index index.php index.html index.htm;
    autoindex off;

    access_log /proc/self/fd/1 combined;

    # Block access to "hidden" files and directories whose names begin with a period. This includes directories used by
    # version control systems such as Subversion or Git to store control files.
    location ~ '(^|/)\.' {
        deny all;
    }
    # But allow "Well-Known URIs" as per RFC 5785.
    location ~* ^/.well-known/ {
        allow all;
    }

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        try_files $uri $uri/ @robots;
        log_not_found off;
        access_log off;
    }
    # Fallback in case robots.txt doesn't exist.
    location @robots {
        return 200 "User-agent: *\nAllow: *\n";
    }

    location / {
        # Push any resources listed in the Link header before the browser has requested it to speed up on HTTP/2.
        http2_push_preload on;
        # Warning for future me: the "try_files" directive is *LITERAL*, it means try a *FILE*. Only the *LAST* argument
        # will be treated as a fallback causing an internal rewrite (ie. the another location block). Do *NOT* put any
        # arguments after "/index.php" or you'll spend nearly two days trying to figure out why Nginx is serving the
        # literal contents of the index.php file as "application/octet-stream" MIME type.
        try_files $uri $uri/ /index.php$is_args$args;
    }

    # Deny access to any files with a .php extension in the uploads directory.
    # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban).
    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
    }

    # Pass all PHP files onto PHP's Fast Process Manager server OR pass via proxy to a Swoole process.
    location ~* '[^/]\.php(/|$)' {
        include php.conf;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        expires max;
        log_not_found off;
    }
}
